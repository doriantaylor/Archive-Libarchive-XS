package Archive::Libarchive::XS;

use strict;
use warnings;
use base qw( Exporter );
use Alien::Libarchive;

# ABSTRACT: Perl bindings to libarchive via XS
# VERSION

=head1 SYNOPSIS

 use Archive::Libarchive::XS;

=head1 DESCRIPTION

This module provides a functional interface to C<libarchive>.  C<libarchive> is a
C library that can read and write archives in a variety of formats and with a 
variety of compression filters, optimized in a stream oriented way.  A familiarity
with the C<libarchive> documentation would be helpful, but may not be necessary
for simple tasks.

=head1 FUNCTIONS

Unless otherwise specified, each function will return an integer return code,
with one of the following values:

=over 4

=item ARCHIVE_OK

Operation was successful

=item ARCHIVE_EOF

Fond end of archive

=item ARCHIVE_RETRY

Retry might succeed

=item ARCHIVE_WARN

Partial success

=item ARCHIVE_FAILED

Current operation cannot complete

=item ARCHIVE_FATAL

No more operations are possible

=back

If you are linking against an older version of libarchive, some of these 
functions may not be available.  You can use the C<can> method to test if
a function or constant is available, for example:

 if(Archive::Libarchive::XS->can('archive_read_support_filter_grzip')
 {
   # grzip filter is available.
 }

You can use this one-liner to determine which functions and constants
are unavailable:

 <%= '%' %> perl -MArchive::Libarchive::XS \
   -E 'for(@Archive::Libarchive::XS::EXPORT_OK) { say $_ unless Archive::Libarchive::XS->can($_) }'

% foreach my $function (sort keys %$functions) {
<%= $functions->{$function} %>

% }
=cut

our %EXPORT_TAGS = (
  all   => [],
  const => [qw(
% foreach my $constant (@$constants) {
    <%= $constant %>
% }
  )],
  func  => [qw(
% foreach my $function (sort keys %$functions) {
    <%= $function %>
% }
  )],
);

require XSLoader;
XSLoader::load('Archive::Libarchive::XS', $VERSION);

=head1 CONSTANTS

If provided by your libarchive library, these constants will be available and
exportable from the L<Archive::Libarchive::XS> (you may import all available
constants using the C<:const> export tag).

=over 4

% foreach my $constant (@$constants) {
=item <%= $constant %>

% }
=back

=cut

foreach my $const (@{ $EXPORT_TAGS{const} }) {
  my $value = eval { _constant($const) };
  next if $@;
  no strict 'refs';
  # what is the best way to do actually do this?
  *{"Archive::Libarchive::XS::$const"} = eval qq{ sub { $value } };
}


our @EXPORT_OK = (@{ $EXPORT_TAGS{const} }, @{ $EXPORT_TAGS{func} });
$EXPORT_TAGS{all} = \@EXPORT_OK;

1;
